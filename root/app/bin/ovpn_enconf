#!/bin/bash

#
# Enables OpenVPN config example
#

source /app/lib/utils

# User permission fix
if [ "$USER" != "abc" ]; then
    RUNAS="sudo -E -u abc"
else
    RUNAS=""
fi

function usage() {
    echo "Usage: ovpn_enconf CONFIG_NAME [wizard args...]"
    echo ""
    echo "Configs:"
    local identifiers=() # Which identifiers we already printed out

    # Go through all identifiers
    for folder in $OVPN_ROOT/example/config/*
    do
        [ -d "$folder" ] || continue
        
        local folder_name="$(echo $folder | sed -E 's/^\/.*\/(.*)$/\1/')"
        
        # Check if we already printed out that identifer
        local found=0
        for i in "$identifiers"
        do
            if [ "$i" = "$folder_name" ]; then
                found=1
                break
            fi
        done
        if [ $found -eq 0 ]; then
            # Print out new identifier
            echo "$folder_name"
            identifiers=($identifiers $folder_name)
        fi
    done
}

#
# Install OpenVPN server configs
# @param source root
# @param dest root
#
function install_server() {
    if [ $# -ne 2 ]; then
        echo "Wrong usage: install_server"
        exit 2
    fi

    # Copy server config
    if [ -d $1/server ]; then
        # Check if destination folder exists
        if [ ! -d "$2/server" ]; then
            echo "$2/server does not exist"
            exit 3
        fi
        
        $RUNAS cp -r $1/server/* $2/server
    fi
}

#
# Install OpenVPN client configs
# @param source root
# @param dest root
#
function install_client() {
    if [ $# -ne 2 ]; then
        echo "Wrong usage: install_client"
        exit 2
    fi

    # Copy client config
    if [ -d $1/client ]; then
        # Check if destination folder exists
        if [ ! -d "$2/client" ]; then
            echo "$2/client does not exist"
            exit 3
        fi

        $RUNAS cp -r $1/client/* $2/client
    fi
}

#
# Install hooks
# @param source root
# @param dest root
#
function install_hooks() {
    if [ $# -ne 2 ]; then
        echo "Wrong usage: install_hooks"
        exit 2
    fi

    # Copy hooks
    if [ -d "$1/hooks" ]; then
        # Check if destination folder exists
        if [ ! -d "$2/hooks" ]; then
            echo "$2/hooks does not exist"
            exit 3
        fi
        
        # Hooks directory exist, check for hooks
        for conf_hook in $1/hooks/*
        do
            # We are only interested in directories inside hook folder
            [ -d $conf_hook ] || continue

            hook_name="$(echo $folder | sed -E 's/^\/.*\/(.*)$/\1/')"

            # Skip hooks that are not in /config/hooks
            if [ ! -d "$2/hooks/$hook_name" ]; then
                echo "Hook $hook_name not found in hooks directory."
                continue
            fi

            # Copy hooks
            $RUNAS cp -r $1/hooks/$hook_name/* $2/hooks/$hook_name
        done
    fi
}

if [ $# -lt 1 ]; then
    usage
    exit 1
fi

if [ $# -gt 0 ]; then
    # Get wanted config name
    config_name=$1
    config_path=$OVPN_ROOT/example/config/$config_name

    # Check if config exists
    if [ ! -d $config_path ]; then
        echo "Config does not exist"
        exit 2
    fi

    # TODO: Check if there is any previous config

    # Configure copy destination
    if [ -f "$config_path/wizard" ] && [ -x "$config_path/wizard" ]; then
        tmp_path=/tmp/wizard

        # Delete existing tmp directory
        if [ -e "$tmp_path" ]; then
            rm -rf $tmp_path
        fi

        # Copy config to temporary folder so it can be modified
        $RUNAS cp -r $config_path $tmp_path
        
        # Run wizard (with temporary path)
        $RUNAS $config_path/wizard "$tmp_path" ${@:2}
        exit_code=$?
        
        # If wizard exists with code other than 0, return error
        if [ $exit_code -ne 0 ]; then
            echo "Error while executing wizard"
            exit $exit_code
        fi

        # Copy wizard finished files
        install_server $tmp_path $OVPN_ROOT/openvpn
        install_client $tmp_path $OVPN_ROOT/openvpn
        install_hooks $tmp_path $OVPN_ROOT

        # Remove temporary directory
        rm -rf $tmp_path
    else
        # Directly copy files
        install_server $config_path $OVPN_ROOT/openvpn
        install_client $config_path $OVPN_ROOT/openvpn
        install_hooks $config_path $OVPN_ROOT

        # Wizard not available
        echo "Sorry, wizard not available for this config"
        echo ""
        echo "Please edit config files in /config/openvpn to suite your needs"
    fi
fi